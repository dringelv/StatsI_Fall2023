# Set working directory
setwd("C:\Users\dring\Documents\GitHub\StatsI_Fall2023\tutorials\02\02_tutorial_HF_draft.R")
# Set working directory
setwd("C:\Users\dring\Documents\GitHub\StatsI_Fall2023\tutorials\02\02_tutorial_HF_draft")
# Set working directory
setwd("C:\Users\dring\Documents\GitHub\StatsI_Fall2023\tutorials\02\02_tutorial_HF_draft.R")
# Set working directory
setwd("\Users\dring\Documents\GitHub\StatsI_Fall2023\tutorials\02\02_tutorial_HF_draft.R")
# Set working directory
setwd("C:/Users/dring/Documents/GitHub/StatsI_Fall2023/tutorials/02/02_tutorial_HF_draft.R")
getwd()
getwd()
# Set working directory
setwd("C:/Users/dring/Documents/GitHub/StatsI_Fall2023/tutorials/02/02_tutorial_HF_draft.R")
getwd()
# Load data
df <- read.csv("datasets/fictional_data.csv")
# First step, look at data
View(df)
head(df)
str(df) # Structure of R object
?str
mean(df$income) # Central tendency, mean
# Load data
df <- read.csv("datasets/fictional_data.csv")
# Load data
df <- read.csv("C:\Users\dring\Documents\GitHub\StatsI_Fall2023\datasets\fictional_data.csv")
# Load data
df <- read.csv("C:/Users/dring/Documents/GitHub/StatsI_Fall2023/datasets/fictional_data.csv")
# First step, look at data
View(df)
head(df)
str(df) # Structure of R object
?str
mean(df$income) # Central tendency, mean
var(df$income) # Variability, variance
sd(df$income) # Variability, standard deviation
# Step by step
df$income # Access variable
length(df$income) # Number of observations
sqrt(length(df$income)) # Take square root
sqrt(19)
# Get summary statistics for entire dataset
summary(df)
# Some quick visualizations, to look at distribution
hist(df$income,
#breaks = 20,
main="Monthly net income",
xlab="Euro")
plot(density(df$incom),
main="Monthly net income",
xlab="Euro")
# What do we need?
mean(df$income) # Point estimate
sd(df$income)/sqrt(length(df$income)) # Standard error
# The **approximate** solution
# Lower bound, 95 confidence level
upper_95 = mean(df$income)+(1.96*sd(df$income)/sqrt(length(df$income)))
# The **approximate** solution
# Lower bound, 95 confidence level
upper_95 = mean(df$income)+(1.96*sd(df$income)/sqrt(length(df$income)))
lower_95
# The **approximate** solution
# Lower bound, 95 confidence level
upper_95 <- mean(df$income)+(1.96*sd(df$income)/sqrt(length(df$income)))
# Upper bound, 95 confidence level
lower_95 <- mean(df$income)-(1.96*sd(df$income)/sqrt(length(df$income)))
# Print
lower_95
mean(df$income)
upper_95
# The **precise** solution, using normal distribution
# Lower bound, 95 confidence level
lower_95_n <- qnorm(0.025,
mean = mean(df$income),
sd = (sd(df$income)/sqrt(length(df$income))))
# Upper bound, 95 confidence level
upper_95_n <- qnorm(0.975,
mean = mean(df$income),
sd = (sd(df$income)/sqrt(length(df$income))))
# Step by step
?qt
qt(0.005, df=length(df$income)-1) # critical value for first 0.5%
qt(0.995, df=length(df$income)-1) # last 0.5%
qt(0.005, df=length(df$income)-1, lower.tail=FALSE) # last 0.5%
# Print
lower_99_t
# The **precise** solution, using t distribution
t_score <- qt(0.995, df=length(df$income)-1)
lower_99_t <- mean(df$income)-(t_score)*(sd(df$income)/sqrt(length(df$income)))
upper_99_t <- mean(df$income)+(t_score)*(sd(df$income)/sqrt(length(df$income)))
qt(0.005, df=length(df$income)-1) # critical value for first 0.5%
qt(0.995, df=length(df$income)-1) # last 0.5%
qt(0.005, df=length(df$income)-1, lower.tail=FALSE) # last 0.5%
# Print
lower_99_t
mean(df$income)
upper_99_t
# How to calculate 99% confidence intervals?
# When to use normal distribution and when to use t distribution?
# The **precise** solution, using t distribution
t_score <- qt(0.995, df=length(df$income)-1)
lower_99_t <- mean(df$income)-(t_score)*(sd(df$income)/sqrt(length(df$income)))
upper_99_t <- mean(df$income)+(t_score)*(sd(df$income)/sqrt(length(df$income)))
# Step by step
?qt
qt(0.005, df=length(df$income)-1) # critical value for first 0.5%
qt(0.995, df=length(df$income)-1) # last 0.5%
qt(0.005, df=length(df$income)-1, lower.tail=FALSE) # last 0.5%
# Print
lower_99_t
mean(df$income)
upper_99_t
# Update Histogram
hist(df$income)
abline(v=mean(df$income),col="black")
abline(v=lower_95,col="black",lty="dashed")
abline(v=upper_95,col="black",lty="dashed")
upper_95_n
# Scatter plot
plot(df$income,df$edu)
plot(df$income,df$edu,
col=df$cap+1) # Color over third variable (+1, because first color in R is white)
# Improve visualization and save
png(file="tutorials/02/scatter_plot.png")
plot(df$income,
df$edu,
col=df$cap+1,
xlab="Monthly net income (in Euro)",
ylab="University level education (in years)",
main="The Relationship between education and income")
legend(1000, 8, # x and y position of legend
legend=c("Non capital", "Capital"),
col=c("black","red"),
pch=1) # Marker type (1 is default)
dev.off()
# Scatter plot
plot(df$income,df$edu)
plot(df$income,df$edu,
col=df$cap+1) # Color over third variable (+1, because first color in R is white)
plot(df$income,
df$edu,
col=df$cap+1,
xlab="Monthly net income (in Euro)",
ylab="University level education (in years)",
main="The Relationship between education and income")
# Add legend
legend(1000, 8, # x and y position of legend
legend=c("Non capital", "Capital"),
col=c("black","red"),
pch=1) # Marker type (1 is default)
# Boxplot
boxplot(df$income ~ df$cap,
main="Boxplot of Income by place of residence",
ylab="Euro",
xlab="Place of residence",
names=c("Non capital","Capital"))
t.test(df$income, mu = 3034)
?t.test
t.test(df$income, mu = 3034, alternative = "less")
# We also found a much easier way to calculate the confidence intervals (!)
t.test(df$income, conf.level = 0.99, alternative = "two.sided")
t.test(df$income, mu = 3034, alternative = "less")
# We also found a much easier way to calculate the confidence intervals (!)
t.test(df$income, conf.level = 0.99, alternative = "two.sided")
# Let's double check
lower_99_t
mean(df$income)
upper_99_t
# Calculate means for subgroups
mean(df[df$cap==0, ]$income)
mean(df[df$cap==1, ]$income)
# Step by step
df$cap
df$cap==0 # Only consider cases with cap==0
df[df$cap==0, ] # Subsetting rows accordingly
df[df$cap==0, ]$income # Access variable
mean(df[df$cap==0, ]$income) # Calculate mean
# t-test
t.test(df$income ~ df$cap, alternative = "two.sided")
?t.test
# t-test
t.test(df$income ~ df$cap, alternative = "less")
