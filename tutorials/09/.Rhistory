# Install and load packages
# Adopted from: https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them
if(!require(mvtnorm)){
install.packages("mvtnorm")
library(mvtnorm)}
# Adopted from p. 153
set.seed(37943) # Set the seed for reproducible results
reps <- 1000 # Set the number of repetitions at the top of the script
b0 <- .2 # True value for the intercept
b1 <- .5 # True value for the slopes
b2 <- .75
n <- 1000 # Sample size
# Level of IV correlation
cor.level <- c(0, .1, .2, .3, .4, .5, .6, .7, .8, .9, .99)
# Empty matrix to store the estimates
par.est.ov <- matrix(NA, nrow = reps, ncol = length(cor.level))
for(j in 1:length(cor.level)){ # Start the j loop
for(i in 1:reps){ # Start the loop
#i <- 1
#j <- 1
X.corr <- matrix(c(1, cor.level[j], cor.level[j], 1), nrow = 2, ncol = 2)
X <- rmvnorm(n, mean = c(0, 0), sigma = X.corr) # Create two correlated
X1 <- X[ , 1]                                   # independent variables
X2 <- X[ , 2]
Y <- b0 + b1*X1 + b2*X2 + rnorm(n, 0, 1) # The true DGP, with N(0, 1) error
model <- lm(Y ~ X1) # Estimate OLS model
par.est.ov[i, j] <- model$coef[2] # Put the estimate for the coefficient on
# X1 in column j
} # End the i loop
} # End the j loop
# Print estimates
par.est.ov
# Get mean of estimates
# True b1 is 0.5
mean(par.est.ov[ , 1]) # r=0
mean(par.est.ov[ , 2]) # r=0.1
mean(par.est.ov[ , 3]) # r=0.2
mean(par.est.ov[ , 4]) # r=0.3
mean(par.est.ov[ , 5]) # r=0.4
mean(par.est.ov[ , 6]) # r=0.5
mean(par.est.ov[ , 7]) # r=0.6
mean(par.est.ov[ , 8]) # r=0.7
mean(par.est.ov[ , 9]) # r=0.8
mean(par.est.ov[ , 10]) # r=0.9
mean(par.est.ov[ , 11]) # r=0.99
# Plot
plot(density(par.est.ov[ , 1]), xlim=c(0,1.5), ylim=c(0,12))
lines(density(par.est.ov[ , 3]), col="gray")
lines(density(par.est.ov[ , 6]), col="orange")
lines(density(par.est.ov[ , 11]), col="red")
abline(v=b1, col="black")
legend(0, 12, # Add legend
legend=c("r=0","r=0.2","r=0.5","r=0.99"),
col=c("black","gray","orange","red"),
pch=1)
# Adopted from p. 345
set.seed(843749) # Set the seed for reproducible results
# Create correlation matrix, (r=0)
rand.vcv <- matrix(0, nrow = 20, ncol = 20)
diag(rand.vcv) <- 1
# Create 20 uncorrelated variables
rand.data <- as.data.frame(rmvnorm(1000, mean = rep(0, times = 20),
sigma = rand.vcv))
# Rename columns
colnames(rand.data) <- c("y", "x1", "x2", "x3", "x4", "x5", "x6", "x7",
"x8", "x9", "x10", "x11", "x12", "x13", "x14", "x15", "x16", "x17",
"x18", "x19")
# Estimate model
rand.model <- lm(y~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 +
x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19, data = rand.data)
summary(rand.model)
View(rand.data)
# Remove objects
rm(list=ls())
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Load any necessary packages
lapply(c("stargazer", "vioplot", "arm"),  pkgTest)
# Set working directory for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Only include Ireland and relevant variables.
df <- read.csv("../../datasets/ESS10.csv")
df_s <- df[df$cntry=="IE", c("euftf","edlvdie","eduyrs","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
View(df_s)
